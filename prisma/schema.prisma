generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Otp {
  id        Int      @id @default(autoincrement())
  userId    Int
  otpHash   String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], map: "Otp_userId_fkey")

  @@index([userId], map: "Otp_userId_fkey")
  @@map("otp")
}

model product {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  price     Decimal  @db.Decimal(10, 2)
  stock     Int
  createdAt DateTime @default(now()) @db.DateTime(6)
  updatedAt DateTime @default(now()) @db.DateTime(6)
}

model RefreshToken {
  id         Int      @id @default(autoincrement())
  userId     Int
  tokenHash  String
  deviceInfo String?
  ipAddress  String?
  userAgent  String?
  issuedAt   DateTime @default(now())
  expiresAt  DateTime
  revoked    Boolean  @default(false)
  user       User     @relation(fields: [userId], references: [id], map: "RefreshToken_userId_fkey")

  @@index([userId], map: "RefreshToken_userId_fkey")
  @@map("refreshtoken")
}

model Session {
  id         Int      @id @default(autoincrement())
  userId     Int
  sessionId  String   @unique
  ipAddress  String?
  userAgent  String?
  deviceName String?
  location   String?
  createdAt  DateTime @default(now())
  lastActive DateTime @default(now())
  expiresAt  DateTime

  user   User   @relation(fields: [userId], references: [id])
  device Device? @relation(fields: [deviceId], references: [id])

  deviceId Int?

  @@index([userId])
  @@map("session")
}

model Device {
  id         Int      @id @default(autoincrement())
  userId     Int
  deviceName String?
  userAgent  String
  ipAddress  String?
  firstSeen  DateTime @default(now())
  lastSeen   DateTime @default(now())

  user      User      @relation(fields: [userId], references: [id])
  sessions  Session[]

  @@unique([userId, deviceName], name: "userId_deviceName")
  @@index([userId])
  @@map("device")
}

model tenant {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  schema    String   @db.VarChar(255)
  createdAt DateTime @default(now()) @db.DateTime(6)
  updatedAt DateTime @default(now()) @db.DateTime(6)
}

model User {
  id           Int            @id @default(autoincrement())
  email        String         @unique(map: "User_email_key")
  passwordHash String?
  isVerified   Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  otpEnabled   Boolean        @default(false)
  otpSecret    String?        @db.VarChar(255)
  lastLoginAt  DateTime?      @db.DateTime(0)
  lastLoginIp  String?        @db.VarChar(45)
  failedLogins Int            @default(0)
  otps          Otp[]
  refreshTokens RefreshToken[]
  sessions      Session[]
  webauthnkey  webauthnkey[]
  devices       Device[]
  
  @@map("user")
}

model webauthnkey {
  id           Int      @id @default(autoincrement())
  userId       Int
  credentialId String   @unique(map: "credentialId") @db.VarChar(255)
  publicKey    String   @db.Text
  counter      Int      @default(0)
  createdAt    DateTime @default(now()) @db.DateTime(0)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "webauthnkey_ibfk_1")

  @@index([userId], map: "userId")
}
