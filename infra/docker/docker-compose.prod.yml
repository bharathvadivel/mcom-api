version: '3.8'

services:
  # All the infrastructure services (same as docker-compose.yml)
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: mcom_ecommerce
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - mcom-network

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    networks:
      - mcom-network

  nats:
    image: nats:2.9-alpine
    networks:
      - mcom-network
    command: ["--jetstream", "--store_dir=/data"]
    volumes:
      - nats_data:/data

  # Production Services
  api-gateway:
    build:
      context: ../../
      dockerfile: apps/api-gateway/Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - NATS_URL=nats://nats:4222
    depends_on:
      - postgres
      - redis
      - nats
    networks:
      - mcom-network
    restart: unless-stopped

  auth-service:
    build:
      context: ../../
      dockerfile: apps/auth-service/Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - NATS_URL=nats://nats:4222
    depends_on:
      - postgres
      - redis
      - nats
    networks:
      - mcom-network
    restart: unless-stopped

  tenant-service:
    build:
      context: ../../
      dockerfile: apps/tenant-service/Dockerfile
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - PORT=3002
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - NATS_URL=nats://nats:4222
    depends_on:
      - postgres
      - redis
      - nats
    networks:
      - mcom-network
    restart: unless-stopped

  catalog-service:
    build:
      context: ../../
      dockerfile: apps/catalog-service/Dockerfile
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
      - PORT=3003
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - NATS_URL=nats://nats:4222
    depends_on:
      - postgres
      - redis
      - nats
    networks:
      - mcom-network
    restart: unless-stopped

  order-service:
    build:
      context: ../../
      dockerfile: apps/order-service/Dockerfile
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=production
      - PORT=3004
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - NATS_URL=nats://nats:4222
    depends_on:
      - postgres
      - redis
      - nats
    networks:
      - mcom-network
    restart: unless-stopped

  payment-service:
    build:
      context: ../../
      dockerfile: apps/payment-service/Dockerfile
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=production
      - PORT=3005
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - NATS_URL=nats://nats:4222
    depends_on:
      - postgres
      - redis
      - nats
    networks:
      - mcom-network
    restart: unless-stopped

  media-service:
    build:
      context: ../../
      dockerfile: apps/media-service/Dockerfile
    ports:
      - "3006:3006"
    environment:
      - NODE_ENV=production
      - PORT=3006
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - NATS_URL=nats://nats:4222
      - MINIO_ENDPOINT=minio:9000
    depends_on:
      - postgres
      - redis
      - nats
      - minio
    networks:
      - mcom-network
    restart: unless-stopped

  theme-service:
    build:
      context: ../../
      dockerfile: apps/theme-service/Dockerfile
    ports:
      - "3007:3007"
    environment:
      - NODE_ENV=production
      - PORT=3007
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - NATS_URL=nats://nats:4222
    depends_on:
      - postgres
      - redis
      - nats
    networks:
      - mcom-network
    restart: unless-stopped

  notification-service:
    build:
      context: ../../
      dockerfile: apps/notification-service/Dockerfile
    ports:
      - "3008:3008"
    environment:
      - NODE_ENV=production
      - PORT=3008
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - NATS_URL=nats://nats:4222
    depends_on:
      - postgres
      - redis
      - nats
    networks:
      - mcom-network
    restart: unless-stopped

  analytics-service:
    build:
      context: ../../
      dockerfile: apps/analytics-service/Dockerfile
    ports:
      - "3009:3009"
    environment:
      - NODE_ENV=production
      - PORT=3009
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - NATS_URL=nats://nats:4222
    depends_on:
      - postgres
      - redis
      - nats
    networks:
      - mcom-network
    restart: unless-stopped

  # MinIO for file storage
  minio:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    networks:
      - mcom-network
    command: server /data --console-address ":9001"

  # Load balancer (Nginx)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./configs/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./configs/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
    networks:
      - mcom-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  nats_data:
  minio_data:

networks:
  mcom-network:
    driver: bridge